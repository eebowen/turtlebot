# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cmvision_3d/Blob3d.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class Blob3d(genpy.Message):
  _md5sum = "b7ac1acee51124a3194784be5dd98a9c"
  _type = "cmvision_3d/Blob3d"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string name
uint32 red
uint32 green
uint32 blue
uint32 area
geometry_msgs/Point center
geometry_msgs/Point top_left
geometry_msgs/Point bottom_right
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['name','red','green','blue','area','center','top_left','bottom_right']
  _slot_types = ['string','uint32','uint32','uint32','uint32','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name,red,green,blue,area,center,top_left,bottom_right

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Blob3d, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = ''
      if self.red is None:
        self.red = 0
      if self.green is None:
        self.green = 0
      if self.blue is None:
        self.blue = 0
      if self.area is None:
        self.area = 0
      if self.center is None:
        self.center = geometry_msgs.msg.Point()
      if self.top_left is None:
        self.top_left = geometry_msgs.msg.Point()
      if self.bottom_right is None:
        self.bottom_right = geometry_msgs.msg.Point()
    else:
      self.name = ''
      self.red = 0
      self.green = 0
      self.blue = 0
      self.area = 0
      self.center = geometry_msgs.msg.Point()
      self.top_left = geometry_msgs.msg.Point()
      self.bottom_right = geometry_msgs.msg.Point()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4I9d.pack(_x.red, _x.green, _x.blue, _x.area, _x.center.x, _x.center.y, _x.center.z, _x.top_left.x, _x.top_left.y, _x.top_left.z, _x.bottom_right.x, _x.bottom_right.y, _x.bottom_right.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.center is None:
        self.center = geometry_msgs.msg.Point()
      if self.top_left is None:
        self.top_left = geometry_msgs.msg.Point()
      if self.bottom_right is None:
        self.bottom_right = geometry_msgs.msg.Point()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 88
      (_x.red, _x.green, _x.blue, _x.area, _x.center.x, _x.center.y, _x.center.z, _x.top_left.x, _x.top_left.y, _x.top_left.z, _x.bottom_right.x, _x.bottom_right.y, _x.bottom_right.z,) = _struct_4I9d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4I9d.pack(_x.red, _x.green, _x.blue, _x.area, _x.center.x, _x.center.y, _x.center.z, _x.top_left.x, _x.top_left.y, _x.top_left.z, _x.bottom_right.x, _x.bottom_right.y, _x.bottom_right.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.center is None:
        self.center = geometry_msgs.msg.Point()
      if self.top_left is None:
        self.top_left = geometry_msgs.msg.Point()
      if self.bottom_right is None:
        self.bottom_right = geometry_msgs.msg.Point()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 88
      (_x.red, _x.green, _x.blue, _x.area, _x.center.x, _x.center.y, _x.center.z, _x.top_left.x, _x.top_left.y, _x.top_left.z, _x.bottom_right.x, _x.bottom_right.y, _x.bottom_right.z,) = _struct_4I9d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4I9d = struct.Struct("<4I9d")
